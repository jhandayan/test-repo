<?php

namespace App;

use App\Log;
use Illuminate\Database\Eloquent\Model;
use Auth;

class Role extends Model
{
    protected $table    = 'roles';
    protected $fillable = ['name','label'];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::updating(function($role){
            $role->logs()->attach(Auth::user()->id, ['module_name' => 'Role', 'log' => Auth::user()->first_name . ' ' . Auth::user()->last_name . ' is updating ' . $role->name]);
        });

        static::creating(function($role){
            $role->logs()->attach(Auth::user()->id, ['module_name' => 'Role', 'log' => Auth::user()->first_name . ' ' . Auth::user()->last_name . ' is creating ' . $role->name]);
        });

        static::deleting(function($role){
            $role->logs()->attach(Auth::user()->id, ['module_name' => 'Role', 'log' => Auth::user()->first_name . ' ' . Auth::user()->last_name . ' is deleting ' . $role->name]);
        });
    }

    public function Permission()
    {
    	return $this->belongsToMany(Permission::class);
    }

    public function PermissionRole()
    {
    	return $this->hasMany(PermissionRole::class);
    }

     public function Users()
    {
        return $this->belongsToMany(User::class);
    }
    
    public function givePermissionTo(Permission $permission)
    {
    	return $this->permission()->save($permission);
    }

    public function attachPermission($permission){
        return $this->permission()->attach($permission);
    }

    public function detachPermission($permission){

        return $this->permission()->detach($permission);

    }

    public function logs(){
        return $this->belongsToMany(User::class, 'logs', 'module_id')
            ->withTimestamps()
            ->latest('pivot_updated_at');
    }

}
